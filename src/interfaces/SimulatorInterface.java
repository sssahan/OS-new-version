/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaces;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import processsimulator.AProcess;
import processsimulator.ReadyQueue;
import processsimulator.Schedular;


/**
 *
 * @author Asus
 */
public class SimulatorInterface extends javax.swing.JFrame {

    /**
     * Creates new form SimulatorInterface
     */
    
    private int noOfProcessers;  
    private Schedular schdular;
    public static Chart proRepTable;
    public static Chart queueRep;
    private int [] xPositions={51,95,140,184,228,273,318,363,406,451,496,540,585,629,673,718,763,807,852,896};
    private int [] yPositions={3,30,57,85,112,139,166,193,221,248,275,302,329,357,384,412};
    private String []processNameList = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q"};
    private int i = 0;
    private int methodNo;
    private int pTime=1;
    
   
    
    public SimulatorInterface() {
        initComponents();
        this.noOfProcessers = 1;
        this.jTable.setModel(new MyTableModel(0));  
        this.noOfProcessers = 0;      
        this.methodNo = 0;
        this.pack();
        
        setProRepTable();
        setQueueRep();
    }
    
    private void setProRepTable(){         
        proRepTable = new Chart();
        proRepTable.setBounds(10,20, 950,300);         
        this.sPanel.add(proRepTable);        
        //c.drawScreen();
    }
    
    private void setQueueRep(){
        queueRep = new Chart();
        queueRep.setBounds(10,20, 500,40);         
        this.readyQueuePanel.add(queueRep);   
    }
    
    private int proNumber(String pName){
       for(int j=0;j<16;j++){
           if(pName.endsWith(this.processNameList[j])){
               return j;
           }
       }
       return -1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        addBut = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        nextBut = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        conBut = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox();
        simBut = new javax.swing.JButton();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cpuP = new javax.swing.JPanel();
        TPUT = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        readyQueuePanel = new javax.swing.JPanel();
        sPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Data"));

        addBut.setText("Add ");
        addBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButActionPerformed(evt);
            }
        });

        jLabel1.setText("Number of processers");

        nextBut.setText("Next");
        nextBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        conBut.setText("Confirm");
        conBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conButActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FirstComeFirstServe", "Round Robin", "HRRF-NonPreemptive", "HRRF-Preemtive" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        simBut.setText("Sim");
        simBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simButActionPerformed(evt);
            }
        });

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jLabel2.setText("pTime");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(nextBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(simBut, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(conBut))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addBut, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addBut)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextBut)
                    .addComponent(conBut)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(simBut))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cpuP.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "CPU"));

        javax.swing.GroupLayout cpuPLayout = new javax.swing.GroupLayout(cpuP);
        cpuP.setLayout(cpuPLayout);
        cpuPLayout.setHorizontalGroup(
            cpuPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cpuPLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(TPUT, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(205, Short.MAX_VALUE))
        );
        cpuPLayout.setVerticalGroup(
            cpuPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cpuPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TPUT, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Job pool"));

        jTable.setBackground(new java.awt.Color(204, 204, 255));
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 29, Short.MAX_VALUE))
        );

        readyQueuePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Ready Queue"));

        javax.swing.GroupLayout readyQueuePanelLayout = new javax.swing.GroupLayout(readyQueuePanel);
        readyQueuePanel.setLayout(readyQueuePanelLayout);
        readyQueuePanelLayout.setHorizontalGroup(
            readyQueuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        readyQueuePanelLayout.setVerticalGroup(
            readyQueuePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        sPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Processor Simulation"));

        javax.swing.GroupLayout sPanelLayout = new javax.swing.GroupLayout(sPanel);
        sPanel.setLayout(sPanelLayout);
        sPanelLayout.setHorizontalGroup(
            sPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        sPanelLayout.setVerticalGroup(
            sPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 307, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cpuP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(readyQueuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(readyQueuePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cpuP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32)
                .addComponent(sPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButActionPerformed
        try{           
            MyTableModel newModel = new MyTableModel(this.noOfProcessers);
            this.jTable.setModel(newModel);
            SimulatorInterface.proRepTable.drawScreen(this.noOfProcessers);
        }catch(Exception ex){
            this.noOfProcessers = 1;
            SimulatorInterface.proRepTable.drawScreen(this.noOfProcessers);
        }
            
    }//GEN-LAST:event_addButActionPerformed

    private void drawReadyQueue(ReadyQueue ready){
       
        SimulatorInterface.queueRep.drawQueue("readyQ");
        int j=5;
        for(AProcess p: ready){
            SimulatorInterface.queueRep.rect(j, 6, p.getName());
            j+=45;
        }   
    }
    
    private void nextButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButActionPerformed
        if(i<20)
            if(this.methodNo==0){
                AProcess next = this.schdular.firstComeFirstServe();
                ReadyQueue ready = schdular.getReadyQueue();
                if(next.getProcessWaitTime()>0){
                    i+= next.getProcessWaitTime();
                    next.setProcessWaitTime(0);
                }
                                
                drawReadyQueue(ready);
                for(int n=0;n<next.getServiceTime();n++){
                    SimulatorInterface.proRepTable.rect(this.xPositions[i],this.yPositions[proNumber(next.getName())], "QQ");
                    i++;         
                }            
            }else if(this.methodNo==1){
                System.out.println("rr");
                AProcess next = this.schdular.roundRobin();
                ReadyQueue ready = schdular.getReadyQueue();
                System.out.println("fdgfd" +next.getArrivalTime());
                if(i<next.getArrivalTime())
                    i = next.getArrivalTime();
                drawReadyQueue(ready);                       
                if(next.getServiceTime()-next.getExcutedTime()>0){
                    for(int n=0;n<this.schdular.getpTime();n++){                        
                        SimulatorInterface.proRepTable.rect(this.xPositions[i],this.yPositions[proNumber(next.getName())], "QQ");
                        i++;         
                    }
                }else{
                    for(int n=0;n<(next.getServiceTime()-next.getExcutedTime()+this.schdular.getpTime());n++){
                        SimulatorInterface.proRepTable.rect(this.xPositions[i],this.yPositions[proNumber(next.getName())], "QQ");
                        i++;         
                    }
                }

            }else if(this.methodNo==3){
                AProcess next = this.schdular.hrrnPree();
                ReadyQueue ready = schdular.getReadyQueue();

                drawReadyQueue(ready);  
                if(next.getServiceTime()-next.getExcutedTime()>0){
                     for(int n=0;n<this.schdular.getpTime();n++){                         
                         SimulatorInterface.proRepTable.rect(this.xPositions[i],this.yPositions[proNumber(next.getName())], "QQ");
                         i++;         
                     }
                }else{
                    for(int n=0;n<(next.getServiceTime()-next.getExcutedTime()+this.schdular.getpTime());n++){
                        SimulatorInterface.proRepTable.rect(this.xPositions[i],this.yPositions[proNumber(next.getName())], "QQ");
                        i++;         
                    }
                }
                 
            }else{
                AProcess next = this.schdular.hrrn();
                ReadyQueue ready = schdular.getReadyQueue();
                if(i<next.getArrivalTime())
                    i = next.getArrivalTime();
                drawReadyQueue(ready);    
                for(int n=0;n<next.getServiceTime();n++){
                    SimulatorInterface.proRepTable.rect(this.xPositions[i],this.yPositions[proNumber(next.getName())], "QQ");
                    i++;         
                }
            }           
            this.TPUT.setText(String.valueOf(this.schdular.getThroughput()));
    }//GEN-LAST:event_nextButActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        this.noOfProcessers = Integer.valueOf(String.valueOf(this.jComboBox1.getSelectedItem()));
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void conButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conButActionPerformed
        ArrayList<AProcess> list = new ArrayList();
        String arTime;
        String seTime;
        
        for(int r=0;r<this.noOfProcessers;r++){
             arTime = String.valueOf(this.jTable.getValueAt(r,1));
             seTime = String.valueOf(this.jTable.getValueAt(r,2));
             if(arTime!=""&&arTime!=null&&seTime!=""&&seTime!=null){
                 AProcess p = new AProcess(this.processNameList[r],Integer.valueOf(arTime),Integer.valueOf(seTime)); 
                 list.add(p);
             }else{
             
             }
        }
        this.schdular = new Schedular(list);
        this.schdular.setpTime(pTime);
        ReadyQueue ready = schdular.getReadyQueue();
        
        drawReadyQueue(ready);  
    }//GEN-LAST:event_conButActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        this.methodNo = jComboBox2.getSelectedIndex();
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void simButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simButActionPerformed
        while(schdular.getReadyQueue().size()>0){
           
        }
    }//GEN-LAST:event_simButActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        this.pTime = Integer.valueOf(String.valueOf(this.jComboBox3.getSelectedItem()));
    }//GEN-LAST:event_jComboBox3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulatorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulatorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulatorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulatorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimulatorInterface().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TPUT;
    private javax.swing.JButton addBut;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton conBut;
    private javax.swing.JPanel cpuP;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    private javax.swing.JButton nextBut;
    private javax.swing.JPanel readyQueuePanel;
    private javax.swing.JPanel sPanel;
    private javax.swing.JButton simBut;
    // End of variables declaration//GEN-END:variables
}
